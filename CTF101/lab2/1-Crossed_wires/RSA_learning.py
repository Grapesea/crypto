import math
import hashlib
import itertools
import string
from pwn import *
import Crypto.Util.number

# Starter
# Modular Exponentiation
print("\033[91mSection 1\033[0m")
print(pow(101,17,22663))  
# 结果是19906

# Public keys
print("\033[91mSection 2\033[0m")
p = 17
q = 23
e = 65537
base = 12
cipher = pow(base, e, p*q)
print(cipher)
# 结果是301

# Euler's Totient
print("\033[91mSection 3\033[0m")
p = 857504083339712752489993810777
q = 1029224947942998075080348647219
def eulertotient_for_N(p,q):
    return (p-1)*(q-1)
print(eulertotient_for_N(p,q))
# 结果是 882564595536224140639625987657529300394956519977044270821168

# Private Key
print("\033[91mSection 4\033[0m")
phi = eulertotient_for_N(p,q)
e = 65537
d = pow(e,-1,phi)
print(d)
# 121832886702415731577073962957377780195510499965398469843281

# RSA Decryption
print("\033[91mSection 5\033[0m")
N = 882564595536224140639625987659416029426239230804614613279163
# 题目已经提到Use the private key that you found for these parameters 
# in the previous challenge to decrypt this ciphertext, 所以\phi(N)可以复用
e = 65537
c = 77578995801157823671636298847186723593814843845525223303932
# d = 121832886702415731577073962957377780195510499965398469843281
base = pow(c, d, N)
print(f"base = {base}")

# RSA Signatures
print("\033[91mSection 6\033[0m")
N_pri = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
d_pri = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
m = "crypto{Immut4ble_m3ssag1ng}"
m_ = Crypto.Util.number.bytes_to_long(m.encode('utf-8'))

c = pow(m_, e, N)
# h = hashlib.sha256(m.encode('utf-8')) 会输出<sha256 _hashlib.HASH object @ 0x00000247C0A97D90>
h = int(hashlib.sha256(m.encode('utf-8')).hexdigest(),16)  
S = pow(h, d_pri, N_pri)
print(S)
